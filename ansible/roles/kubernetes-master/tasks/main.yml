- name: "Create kubelet.service.d directory"
  file: path=/etc/systemd/system/kubelet.service.d/ state=directory mode=0755

- name: "Copy files"
  copy: src={{ item.src }} dest={{ item.dest }} owner=root group=root mode=0644
  with_items:
    - { src: 'files/etc/selinux/config', dest: '/etc/selinux/config' }
    - { src: 'files/etc/sysctl.d/k8s.conf', dest: '/etc/sysctl.d/k8s.conf' }
    - { src: 'files/etc/profile.d/kubernetes.sh', dest: '/etc/profile.d/01-kubernetes.sh' }
    - { src: 'files/etc/modules-load.d/ip_vs.conf', dest: '/etc/modules-load.d/ip_vs.conf' }
    - { src: 'files/etc/yum.repos.d/kubernetes.repo', dest: '/etc/yum.repos.d/kubernetes.repo' }
    - { src: 'files/etc/systemd/system/kubelet.service.d/10-kubeadm.conf', dest: '/etc/systemd/system/kubelet.service.d/10-kubeadm.conf' }

- name: "Disable swap"
  command: swapoff -a

- name: "Disable swap in fstab"
  replace:
    dest: /etc/fstab
    regexp: '^/swap'
    replace: '#/swap'

- name: "SELinux setenforce 0"
  selinux:
    policy: targeted
    state: permissive

- name: "Load kernel modules"
  modprobe:
    name: "{{ item }}"
    state: present
  with_items:
    - ip_vs_sh
    - ip_vs_wrr
    - br_netfilter

- name: "Enable bridge-nf-call-iptables kernel module"
  command: echo '1' > /proc/sys/net/bridge/bridge-nf-call-iptables

- name: "Enable Ports"
  firewalld:
    port: "{{ item.port }}/{{ item.type }}"
    permanent: true
    state: enabled
  with_items:
    - { port: 2379, type: tcp }
    - { port: 2380, type: tcp }
    - { port: 6443, type: tcp }
    - { port: 6783, type: tcp }
    - { port: 6783, type: udp }
    - { port: 6784, type: udp }
    - { port: 10250, type: tcp }
    - { port: 10251, type: tcp }
    - { port: 10252, type: tcp }

- name: "Reload Firewall Service"
  service:
    name: firewalld
    state: reloaded
    enabled: yes

- name: "Reload sysctl"
  command: sysctl --system

# - name: "Remove Kubernetes"
#   yum:
#     name:
#       - kubectl
#       - kubelet
#       - kubeadm
#       - kubernetes-cni
#     state: removed
#     disable_excludes: main

- name: "Install Kubernetes"
  yum:
    name:
      - kubectl-{{ kubernetes_version }}
      - kubelet-{{ kubernetes_version }}
      - kubeadm-{{ kubernetes_version }}
      - kubernetes-cni-{{ kubernetes_cni_version }}
    state: installed
    disable_excludes: main

- name: "Reload daemon-reload Service"
  command: systemctl daemon-reload

- name: "Start Docker Service"
  systemd:
    name: docker
    state: started
    enabled: yes

- name: "Obtain state of kublet service"
  command: systemctl status kubelet.service
  register: kubelet_status
  failed_when: kubelet_status.rc > 3

- name: "Initialize server with - kubeadm init"
  shell: kubeadm init --apiserver-advertise-address=$(hostname -i) \
                      --token={{ kubernetes_token }} \
                      --pod-network-cidr={{ kubernetes_pod_network_cidr }}
  when: "'running' not in kubelet_status.stdout"

- name: "Create /root/.kube directory"
  file: path=/root/.kube state=directory owner=root group=root mode=0755

- name: "Create /home/vagrant/.kube directory"
  file: path=/home/vagrant/.kube state=directory owner=vagrant group=vagrant mode=0755
  when: deployment == "development"

- name: "Copy /etc/kubernetes/admin.conf to /root/.kube/config"
  copy: src='/etc/kubernetes/admin.conf' dest='/root/.kube/config' owner=root group=root mode=0640 remote_src=yes

- name: "Copy /etc/kubernetes/admin.conf to /home/vagrant/.kube/config"
  copy: src='/etc/kubernetes/admin.conf' dest='/home/vagrant/.kube/config' owner=vagrant group=vagrant mode=0640 remote_src=yes
  when: deployment == "development"

- name: "Apply CNI Wave Net plugin"
  shell: kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"
  when: kubernetes_network_cni == "wavenet"

- name: "Start Kublet Service"
  systemd:
    name: kubelet
    state: started
    enabled: yes

- name: "Start firewalld Service"
  systemd:
    name: firewalld
    state: started
    enabled: yes
